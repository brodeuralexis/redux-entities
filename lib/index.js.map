{"version":3,"file":"index.js","sources":["../src/state.ts","../src/actions.ts","../src/reducer.ts","../src/create-actions.ts","../src/create-action-matchers.ts","../src/selectors.ts","../src/create-selectors.ts","../src/index.ts"],"sourcesContent":["/**\n * The key to use for this module.\n */\nexport const entitiesKey = Symbol('entities')\n\n/**\n * The part of the state this module knows about.\n */\nexport type State = {\n  [entitiesKey]: EntitiesState\n}\n\n/**\n * The structure of the state associated with the reducer.\n */\nexport type EntitiesState = {\n  [type: string]: Entities\n}\n\n/**\n * The map of entities.\n */\nexport type Entities = {\n  [id: string]: object\n}\n\n/**\n * A map of typed entities.\n */\nexport type TypedEntities<TType> = {\n  [id: string]: TType\n}\n\n/**\n * The initial value of the state.\n */\nexport const initialState: EntitiesState = {}\n\n/**\n * Associates a given key with a given `id` for each provided entities.  If the\n * `id` already has an entry, it overrides the previous value.\n * @param state The state\n * @param type The type of the entities\n * @param entities The entities\n */\nexport function setEntities (state: EntitiesState, type: string, entities: Entities): EntitiesState {\n  const oldEntities = state[type] || {}\n\n  return {\n    ...state,\n    [type]: {\n      ...oldEntities,\n      ...entities\n    }\n  }\n}\n\n/**\n * Removes the given `id`s from the map of entities.  If the entity with one of\n * the given `id` does not exist, do nothing.\n * @param state The state\n * @param type The type of the entities\n * @param ids The `id`s\n */\nexport function unsetEntities (state: EntitiesState, type: string, ids: string[]): EntitiesState {\n  const oldEntities = state[type]\n\n  if (oldEntities == null) {\n    return state\n  }\n\n  const newEntities = {\n    ...oldEntities\n  }\n\n  for (const id of ids) {\n    delete newEntities[id]\n  }\n\n  return {\n    ...state,\n    [type]: newEntities\n  }\n}\n","import { Action } from 'redux'\nimport { Entities } from './state'\n\n// #region SET_ENTITIES\n/**\n * The type of the `SetEntitiesAction`.\n */\nexport const SET_ENTITIES = Symbol('@@redux-entities/SET_ENTITY')\n\n/**\n * An action indicating the fact that the user wants to add entities to the\n * state.\n */\nexport interface SetEntitiesAction extends Action {\n  type: typeof SET_ENTITIES,\n  payload: {\n    type: string,\n    entities: Entities\n  }\n}\n\n/**\n * Instructs the reducer the add the following entities of the given type to the\n * state.\n * @param type The type of the entities\n * @param entities The entities\n * @returns An `SetEntitiesAction`\n */\nexport function setEntities (type: string, entities: Entities): SetEntitiesAction {\n  return {\n    type: SET_ENTITIES,\n    payload: {\n      type,\n      entities\n    }\n  }\n}\n// #endregion\n\n// #region UNSET_ENTITIES\n/**\n * The type of the `UnsetEntitiesAction`.\n */\nexport const UNSET_ENTITIES = Symbol('@@redux-entities/UNSET_ENTITIES')\n\n/**\n * An action indicating the fact that the user wants to remove entities from the\n * state by their `id`s.\n */\nexport interface UnsetEntitiesAction extends Action {\n  type: typeof UNSET_ENTITIES,\n  payload: {\n    type: string,\n    ids: string[]\n  }\n}\n\n/**\n * Removes all the entities with the given `id`s for the given `type`.\n * @param type The type of the entities\n * @param ids The `id`s of the entities\n * @returns An `UnsetEntitiesAction`\n */\nexport function unsetEntities (type: string, ids: string[]): UnsetEntitiesAction {\n  return {\n    type: UNSET_ENTITIES,\n    payload: {\n      type,\n      ids\n    }\n  }\n}\n// #endregion\n\n// #region Aliases\n/**\n * Indicates that the user wants to add a given entity to the state.\n * @param type The type\n * @param id  The `id`\n * @param entity The entity\n * @returns A `SetEntitiesAction`\n */\nexport function setEntity (type: string, id: string, entity: object) {\n  return setEntities(type, { [id]: entity })\n}\n\n/**\n * Indicates that the user wants to remove an entity by it's given `id`.\n * @param type The type\n * @param id The `id`\n * @returns An `UnsetEntitiesAction`\n */\nexport function unsetEntity (type: string, id: string) {\n  return unsetEntities(type, [id])\n}\n// #endregion\n\nexport type EntitiesAction\n  = SetEntitiesAction\n  | UnsetEntitiesAction\n","import { Action } from 'redux'\nimport { EntitiesAction, SET_ENTITIES, UNSET_ENTITIES } from './actions'\nimport { EntitiesState, initialState, setEntities, unsetEntities } from './state'\n\n/**\n * The reducer for the entities.\n * @param state The state\n * @param action An action\n * @returns The new value of the state\n */\nexport function entitiesReducer (state: EntitiesState, action: EntitiesAction): EntitiesState {\n  switch (action.type) {\n    case SET_ENTITIES: {\n      return setEntities(state, action.payload.type, action.payload.entities)\n    }\n    case UNSET_ENTITIES: {\n      return unsetEntities(state, action.payload.type, action.payload.ids)\n    }\n    default: {\n      return state\n    }\n  }\n}\n","import { TypedEntities } from './state'\nimport { setEntities, setEntity, unsetEntities, unsetEntity, SetEntitiesAction, UnsetEntitiesAction } from './actions'\n\n/**\n * Creates action creators for the given entity type.\n * @param type The type of the entity\n */\nexport function createActions<TType extends object> (type: string) {\n  return {\n    setEntity (id: string, entity: TType) {\n      return setEntity(type, id, entity)\n    },\n    setEntities (entities: TypedEntities<TType>) {\n      return setEntities(type, entities)\n    },\n    unsetEntity (id: string) {\n      return unsetEntity(type, id)\n    },\n    unsetEntities (ids: string[]) {\n      return unsetEntities(type, ids)\n    }\n  }\n}\n","import { Action } from 'redux'\nimport { SetEntitiesAction, SET_ENTITIES, UnsetEntitiesAction, UNSET_ENTITIES } from './actions'\n\n/**\n * Creates action matchers for a specific entity.\n * @param type The type of the entity\n */\nexport function createActionMatchers<TType extends object> (type: string) {\n  function _isSetEntities (action: Action): action is SetEntitiesAction {\n    return action.type === SET_ENTITIES\n  }\n\n  function _isUnsetEntities (action: Action): action is UnsetEntitiesAction {\n    return action.type === UNSET_ENTITIES\n  }\n\n  function isSetEntities (action: Action): action is SetEntitiesAction {\n    return _isSetEntities(action) && action.payload.type === type\n  }\n\n  function isUnsetEntities (action: Action): action is UnsetEntitiesAction {\n    return _isUnsetEntities(action) && action.payload.type === type\n  }\n\n  function isSetEntity (id: string) {\n    return function (action: Action) {\n      return isSetEntities(action) && id in action.payload.entities\n    }\n  }\n\n  function isUnsetEntity (id: string) {\n    return function (action: Action) {\n      return isUnsetEntities(action) && action.payload.ids.indexOf(id) !== -1\n    }\n  }\n\n  return {\n    isSetEntities,\n    isUnsetEntities,\n    isSetEntity,\n    isUnsetEntity\n  }\n}\n","import { State, entitiesKey } from './state'\n\n/**\n * Returns the entity with the given `type` and `id`.  If the entity does not\n * exist, return `null`.\n * @param state The state\n * @param type The type of the entity\n * @param id The id of the entity\n * @returns An entity or `null`\n */\nexport function getEntity (state: State, type: string, id: string): object | null {\n  const entities = state[entitiesKey][type]\n\n  if (!entities) {\n    return null\n  }\n\n  return entities[id] as object || null\n}\n\n/**\n * Returns a list of entities for all `id` supplied in the `ids` array.  If the\n * `id` does not point to a valid entity, an error is throw.\n * @param state The state\n * @param type The type of the entities\n * @param ids An array of entity id\n * @returns An array of entities\n */\nexport function getEntities (state: State, type: string, ids: string[]): object[] {\n  if (!hasType(state, type)) {\n    throw new Error(`Expected the \"${type}\" type to exist`)\n  }\n\n  return ids.map(function (id) {\n    const entity = getEntity(state, type, id)\n\n    if (entity == null) {\n      throw new Error(`Expected the \"${type}\" with identified by \"${id}\" to exist`)\n    }\n\n    return entity\n  })\n}\n\n/**\n * Returns a list of entities for all `id` supplied in the `ids` array.  If the\n * `id` does not point to a valid entity, it is ignored in the resulting array.\n * @param state The state\n * @param type The type of the entities\n * @param ids An array of entity id\n * @returns An array of entities\n */\nexport function getEntitiesSafe (state: State, type: string, ids: string[]): object[] {\n  return ids.reduce<object[]>(function (entities, id) {\n    const entity = getEntity(state, type, id)\n\n    if (entity) {\n      entities.push(entity)\n    }\n\n    return entities\n  }, [])\n}\n\n/**\n * Indicates if an entity is present in the state by it's given `id`.\n * @param state The state\n * @param type The type of entity\n * @param id The `id` of the entity\n * @returns The entity's presence\n */\nexport function hasEntity (state: State, type: string, id: string): boolean {\n  return getEntity(state, type, id) != null\n}\n\nfunction hasType (state: State, type: string) {\n  return state[entitiesKey][type] != null\n}\n","import { State, entitiesKey } from './state'\nimport { getEntity, getEntities, getEntitiesSafe, hasEntity } from './selectors'\n\n/**\n * Creates selectors partially applied for a given type.\n * @param type A unique key representing the type of entities\n */\nexport function createSelectors<TType extends object> (type: string) {\n  return {\n    getEntity (state: State, id: string): TType | null {\n      return getEntity(state, type, id) as TType | null\n    },\n    getEntities (state: State, ids: string[]): TType[] {\n      return getEntities(state, type, ids) as TType[]\n    },\n    getEntitiesSafe (state: State, ids: string[]): TType[] {\n      return getEntitiesSafe(state, type, ids) as TType[]\n    },\n    hasEntity (state: State, id: string): boolean {\n      return hasEntity(state, type, id)\n    }\n  }\n}\n","import { Action } from 'redux'\n\nimport { SetEntitiesAction, UnsetEntitiesAction } from './actions'\nimport { entitiesKey } from './state'\nimport { entitiesReducer } from './reducer'\n\nimport { createActions } from './create-actions'\nimport { createActionMatchers } from './create-action-matchers'\nimport { createSelectors } from './create-selectors'\n\nexport function createEntityHelpers<TType extends object> (type: string) {\n  return {\n    matchers: createActionMatchers<TType>(type),\n    actions: createActions<TType>(type),\n    selectors: createSelectors<TType>(type)\n  }\n}\n\nexport { createActions } from './create-actions'\nexport { createActionMatchers } from './create-action-matchers'\nexport { createSelectors } from './create-selectors'\n\nexport const entities = {\n  [entitiesKey]: entitiesReducer\n}\n\nexport { entitiesReducer } from './reducer'\nexport { entitiesKey } from './state'\n"],"names":["setEntities","unsetEntities"],"mappings":"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"}